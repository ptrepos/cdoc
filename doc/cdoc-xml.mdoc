# cdoc XML フォーマット

[:contents:1-2]

## 概要

cdocはC言語向けドキュメント記述フォーマットです。

XMLの記述は通常は煩わしいものですが、
専用のアプリケーションを用意することでドキュメントの記述性を高めています。

XMLファイルはプログラムAPIの仕様に従って構造化されており、
ドキュメント構造を元にドキュメントの詳細性や一覧機能などを実装できます。

## XML構造

+ c-doc(要素:ドキュメントルート)
	+ name(要素:ライブラリ名称)
	+ summary(要素:概要)
	+ description(要素:説明)
	+ header-file(要素:ヘッダファイル)
		- name(属性:ヘッダファイル名)
		+ summary(要素:概要)
		+ description(要素:説明)
		+ type(要素:型)
			- name(属性:型名)
			- kind(属性:型種別)
			+ summary(要素:概要)
			+ definition(要素:定義)
			+ field(要素:フィールド)
				- name(属性:フィールド名)
				- type(属性:フィールド型名)
				+ description(要素:説明)
			+ description(要素:説明)
		+ function(要素:関数)
			- name(属性:関数名)
			+ summary(要素:概要)
			+ definition(要素:定義)
			+ parameter(要素:パラメータ)
				- name(属性:パラメータ名)
				+ description(要素:説明)
			+ description(要素:説明)
		+ const(要素:定数)
			- name(属性:定数名)
			- type(属性:定数型)
			+ summary(要素:概要)
			+ description(要素:説明)

## c-doc要素

ドキュメントのルート要素です。
ライブラリの情報を記述します。

### 記入例
	<c-doc name="ライブラリ名">
		<summary>概要</summary>
		<description></description>
		
		<header-file>
			...
		</header-file>
	</c-doc>

### id属性

ライブラリのシステム上の名称を記述します。
システム上、競合させないためのIDとして使用します。

### name要素

ライブラリの名称を記述します。

### summary要素

ライブラリの概要を記述します。

### description要素

ライブラリの説明を記述します。


## header-file要素

ヘッダファイルの説明を記述します。


### 記入例
	<header-file name="dir/file.h">
		<summary>概要</summary>
		<description>説明・・・</description>
		
		<type>
			...
		</type>
		<function>
			...
		</function>
		<const>
			...
		</const>
	</header-file>

### name属性

ヘッダファイルの名称を記述します。

### summary要素

ヘッダファイルの概要を記述します。

### description要素

ヘッダファイルの説明を記述します。



## type要素

型情報の説明を記述します。

### 記述例

	<type name="structure" kind="struct">
		<summary>概要</summary>
		<description>説明</description>
		<field name="field1" type="int">
			<description>フィールドの説明</description>
		</field>
		...
	</type>

### name属性

型名を記述します。

### kind属性

型の種類を記述します。
値は下記となります。

:struct
	構造体
:enum
	列挙体
:union
	共用体
:typedef
	別名

### summary要素

概要を記述します。

### description要素

説明を記述します。

### field要素

型のフィールドを記述します。

#### name属性

フィールド名を記述します。

#### type属性

フィールドの型名を記述します。

#### description要素

フィールドの説明を記述します。

## function要素

関数情報の説明を記述します。

### 記述例

	<function name="func1">
		<summary>概要</summary>
		<definition>void func(int param1, int param2, int param3)</definition>
		<parameter name="param1" ioType="in">
			<description>パラメータの説明</description>
		</parameter>
		<parameter name="param2" ioType="in">
			<description>パラメータの説明</description>
		</parameter>
		<parameter name="param3" ioType="in">
			<description>パラメータの説明</description>
		</parameter>
		<description>説明</description>
		...
	</function>

### name属性

関数名を記述します。

### summary要素

関数の概要を記述します。

### definition要素

関数の定義を記述します。

### parameter要素

関数の引数情報を記述します。

#### name属性

関数の引数名を記述します。

#### description要素

関数の引数の説明を記述します。

### description要素

関数の説明を記述します。

## const要素

定数情報の説明を記述します。

### 記述例

	<const name="CONST" type="int">
		<summary>概要</summary>
		<description>説明</description>
	</const>

### name属性

定数の名前を記述します。

### type属性

定数の型を記述します。

### summary要素

定数の概要を記述します。

### description要素

定数の説明を記述します。


